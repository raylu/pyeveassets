#!/usr/bin/env python3

import eventlet
eventlet.monkey_patch()

from collections import defaultdict
import datetime
import functools
import operator
from os import path
import sys
import urllib.parse

import eventlet.wsgi
from pigwig import PigWig, Response
from pigwig.exceptions import HTTPException
import requests

import config
import db

pea_dir = path.normpath(path.dirname(path.abspath(__file__)))
template_dir = path.join(pea_dir, 'templates')

LOGIN_TIME = datetime.timedelta(days=30)

requests.utils.default_headers().update({'User-Agent': 'pyeveassets'})

def routes():
	return [
		('GET', '/', root),
		('POST', '/register', register),
		('POST', '/login', login),
		('GET', '/logout', logout),
		('GET', '/assets', assets),
		('GET', '/assets/<char_id>', char_assets),
		('GET', '/oauth', oauth),
	]

def root(request):
	user_id = request.get_secure_cookie('user_id', LOGIN_TIME)
	logged_in = False
	if user_id:
		logged_in = True
	return Response.render(request, 'root.jinja2', {'logged_in': logged_in})

def register(request):
	try:
		username = request.body['username']
		password = request.body['password']
	except KeyError:
		raise HTTPException(400, 'missing keys')
	user_id = db.create_user(username, password)
	resp = Response(code=303, location='/assets')
	resp.set_secure_cookie(request, 'user_id', user_id)
	resp.set_secure_cookie(request, 'username', username)
	return resp

def login(request):
	try:
		username = request.body['username']
		password = request.body['password']
	except KeyError:
		raise HTTPException(400, 'missing keys')
	user_id = db.check_login(username, password)
	if user_id is None:
		raise HTTPException(403, 'invalid login')
	resp = Response(code=303, location='/assets')
	resp.set_secure_cookie(request, 'user_id', user_id)
	resp.set_secure_cookie(request, 'username', username)
	return resp

def authed(f):
	@functools.wraps(f)
	def wrapper(request, **kwargs):
		user_id = request.get_secure_cookie('user_id', LOGIN_TIME)
		if not user_id:
			raise HTTPException(401, 'log in first')
		username = request.get_secure_cookie('username', LOGIN_TIME)
		return f(request, user_id, username, **kwargs)
	return wrapper

@authed
def oauth(request, user_id, username):
	code = request.query['code']

	r = requests.post('https://login.eveonline.com/oauth/token',
			auth=(config.client_id, config.secret_key),
			data={'grant_type': 'authorization_code', 'code': code})
	r.raise_for_status()
	data = r.json()
	token = data['access_token']
	refresh_token = data['refresh_token']

	r = requests.get('https://login.eveonline.com/oauth/verify', headers={'Authorization': 'Bearer ' + token})
	r.raise_for_status()
	data = r.json()
	char_id = data['CharacterID']
	char_name = data['CharacterName']
	token_expires = data['ExpiresOn']
	db.create_eve_char(char_id, user_id, char_name, token, token_expires, refresh_token)
	return Response(code=307, location='/assets')

oauth_url = 'https://login.eveonline.com/oauth/authorize?' + urllib.parse.urlencode({
	'response_type': 'code',
	'redirect_uri': config.base_url + '/oauth',
	'client_id': config.client_id,
	'scope': 'publicData characterNavigationWrite characterWalletRead characterAssetsRead corporationWalletRead corporationAssetsRead esi-wallet.read_character_wallet.v1 esi-search.search_structures.v1 esi-universe.read_structures.v1 esi-assets.read_assets.v1 esi-markets.structure_markets.v1 esi-corporations.read_structures.v1',
})

def logout(request):
	resp = Response(code=303, location='/')
	resp.set_cookie('username', '', max_age=datetime.timedelta(seconds=-1))
	resp.set_cookie('user_id', '', max_age=datetime.timedelta(seconds=-1))
	return resp

@authed
def assets(request, user_id, username):
	chars = db.iter_chars(user_id)
	return Response.render(request, 'assets.jinja2',
			{'oauth_url': oauth_url, 'username': username, 'chars': chars})

@authed
def char_assets(request, user_id, username, char_id):
	char = db.get_char(user_id, char_id)
	char_name = char['char_name']
	now = datetime.datetime.utcnow()
	if char['token_expires'] < now:
		r = requests.post('https://login.eveonline.com/oauth/token',
				data={'grant_type': 'refresh_token', 'refresh_token': char['refresh_token']},
				auth=(config.client_id, config.secret_key))
		r.raise_for_status()
		data = r.json()
		token = data['access_token']
		token_expires = now + datetime.timedelta(seconds=data['expires_in'])
		db.refresh_char(char_id, token, token_expires)
	else:
		token = char['token']

	r = requests.get('https://esi.tech.ccp.is/v1/characters/%s/assets/' % char_id,
			headers={'Authorization': 'Bearer ' + token})
	r.raise_for_status()
	data = r.json()
	station_items = list(filter(lambda i: i['location_type'] == 'station', data))
	type_ids = set(map(lambda i: i['type_id'], data))
	station_ids = set(map(lambda i: i['location_id'], station_items))

	# prep container map
	types = db.types(tuple(type_ids))
	container_map = {}
	for doc in data:
		try:
			item_name, price = types[doc['type_id']]
			if price is None:
				price = 0
		except KeyError:
			item_name, price = doc['type_id'], 0
		quantity = doc.get('quantity', 1)

		location_type = doc['location_type']
		location_id = doc['location_id']
		total_price = quantity * price
		item = Item(doc['type_id'], doc['item_id'], item_name, quantity, total_price, location_type, location_id)
		container_map[doc['item_id']] = item

	# build tree
	station_map = defaultdict(list)
	for item_id, item in container_map.items():
		if item.location_type == 'station':
			station_map[item.location_id].append(item)
		else:
			try:
				container = container_map[item.location_id]
				container.children.append(item)
				item.parent = container
			except KeyError: # deliveries - pretend it's a station
				station_map[item.location_id].append(item)

	# calculate cumulative prices
	for item in container_map.values():
		if item.children: # only leaf nodes
			continue
		while item.parent:
			item.parent.cumulative_price += item.cumulative_price
			item = item.parent

	stations = db.stations(tuple(station_ids))
	all_items = []
	for station_id, item_list in station_map.items():
		station_name = stations.get(station_id, station_id)
		station_total = sum(filter(None, map(operator.attrgetter('cumulative_price'), item_list)))
		all_items.append((station_name, station_total, item_list))

	# sort stations by total item price
	all_items.sort(key=operator.itemgetter(1), reverse=True)
	for _, _, item_list in all_items:
		# sort items in station by cumulative price
		item_list.sort(key=operator.attrgetter('cumulative_price'), reverse=True)
		for item in item_list:
			# sort first level of subitems by cumulative price
			item.children.sort(key=operator.attrgetter('cumulative_price'), reverse=True)

	return Response.render(request, 'char_assets.jinja2',
			{'char_id': char_id, 'char_name': char_name, 'all_items': all_items})

class Item:
	def __init__(self, type_id, item_id, name, quantity, total_price, location_type, location_id):
		self.type_id = type_id
		self.item_id = item_id
		self.name = name
		self.quantity = quantity
		self.total_price = self.cumulative_price = total_price
		self.location_type = location_type
		self.location_id = location_id
		self.parent = None
		self.children = []

app = PigWig(routes, template_dir=template_dir, cookie_secret=config.cookie_secret)
def main():
	if len(sys.argv) == 2:
		port = int(sys.argv[1])
		eventlet.wsgi.server(eventlet.listen(('127.0.0.1', port)), app)
	else:
		app.main()

if __name__ == '__main__':
	main()
